
fleet_get_warp_speed_mult = {
	$FLEET$ = {
		random_owned_ship = {
			limit = {
				OR = {
					has_component = BIO_DRIVE_5
					has_component = WARP_DRIVE_5
					has_component = BIO_WARP_DRIVE_5
				}
			}
			save_event_target_as = warp_plugin_temp_fastest_ship
		}
		random_owned_ship = {
			limit = {
				OR = {
					has_component = BIO_DRIVE_4
					has_component = WARP_DRIVE_4
					has_component = BIO_WARP_DRIVE_4
					has_component = GUARDIAN_DRIVE
				}
			}
			save_event_target_as = warp_plugin_temp_fastest_ship
		}
		random_owned_ship = {
			limit = {
				OR = {
					has_component = BIO_DRIVE_3
					has_component = WARP_DRIVE_3
					has_component = BIO_WARP_DRIVE_3
				}
			}
			save_event_target_as = warp_plugin_temp_fastest_ship
		}
		random_owned_ship = {
			limit = {
				OR = {
					has_component = BIO_DRIVE_2
					has_component = WARP_DRIVE_2
					has_component = BIO_WARP_DRIVE_2
				}
			}
			save_event_target_as = warp_plugin_temp_fastest_ship
		}
		random_owned_ship = {
			limit = {
				or = {
					has_component = BIO_DRIVE
					has_component = WARP_DRIVE_1
					has_component = BIO_WARP_DRIVE_1
				}
			}
			save_event_target_as = warp_plugin_temp_fastest_ship
		}
		random_owned_ship = {
			limit = {
				or = {
					has_component = EMPTY_DRIVE
					has_component = BIO_EMPTY_DRIVE
				}
			}
			save_event_target_as = warp_plugin_temp_fastest_ship
		}

		if = {
			limit = {
				exists = event_target:warp_plugin_temp_fastest_ship
			}
			set_variable = {
				which = $OUTPUT$
				value = event_target:warp_plugin_temp_fastest_ship.modifier:ship_interstellar_speed_mult
			}
		}
	}
}

warp_plugin_failure_roll = {
	$FLEET$ = {	
		random_list = {
			99 = {}
			1 = {
				random_list = {
					1 = {
						set_fleet_flag = warp_plugin_weapon_failure
					}
					1 = {
						set_fleet_flag = warp_plugin_propulsion_failure
					}
					1 = {
						set_fleet_flag = warp_plugin_shield_failure
					}
					1 = {
						set_fleet_flag = warp_plugin_armor_failure
					}
					1 = {
						set_fleet_flag = warp_plugin_cloak_failure
						modifier = {
							factor = 0
							has_first_contact_dlc = no
						}
					}
					1 = {
						set_fleet_flag = warp_plugin_sensor_failure
					}
				}
				modifier = {
					factor = 0
					event_target:warp_situation = {
						current_situation_approach = approach_normal_operations
					}
				}
			}
		}
	}
}

warp_plugin_wip_retrieve_scopes = {
	$FLEET$ = {
		owner = {
			random_situation = {
				limit = {
					is_situation_type = situation_warp_in_progress
					target = {
						is_same_value = root
					}
				}
				save_event_target_as = $SITUATION_OUT$
			}
		}
		random_system = {
			limit = {
				root = {
					has_fleet_flag = warp_plugin_warp_source_@prev
				}
			}
			save_event_target_as = $SOURCE_OUT$
		}
		random_system = {
			limit = {
				root = {
					has_fleet_flag = warp_plugin_warp_destination_@prev
				}
			}
			save_event_target_as = $DESTINATION_OUT$
		}
	}
}

warp_plugin_warp_end_cleanup = {
	$FLEET$ = {
		# abort situation and clear flags
		abort_situation = event_target:warp_situation
		remove_fleet_flag = warp_plugin_active
		remove_fleet_flag = warp_plugin_warp_source_@event_target:warp_plugin_warp_source
		remove_fleet_flag = warp_plugin_warp_destination_@event_target:warp_plugin_warp_destination
		set_event_locked = no
		# clear variables 
		clear_variable = warp_time_remaining
	}
}
