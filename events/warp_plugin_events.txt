
namespace = warp_plugin

# called on start and single player save load
# if added after multiplayer start, blame the host for indecision
event = {
	id = warp_plugin.1000
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		set_global_flag = warp_plugin_installed
	}
}

# called on game start
country_event = {
	id = warp_plugin.0
	title = warp_plugin.0.name
	picture = GFX_evt_ship_travel
	show_sound = event_ship_thrusters
	is_triggered_only = yes
	
	desc = {
		trigger = {
			not = { has_civic = civic_warp_ftl_theory }
		}
		text = warp_plugin.0.desc
	}
	desc = {
		trigger = {
			has_civic = civic_warp_ftl_theory
		}
		text = warp_plugin.0.desc.civic
	}

	immediate = {
		if = {
			limit = {
				has_country_flag = uses_warp_drives
			}
			force_add_civic = civic_warp_ftl_theory
		}
	}

	option = {
		name = warp_plugin.0.a
		trigger = {
			not = { has_civic = civic_warp_ftl_theory }
		}
		force_add_civic = civic_warp_ftl_theory
		ai_chance = {
			weight = 0
		}
	}

	option = {
		name = warp_plugin.0.b
		trigger = {
			not = { has_civic = civic_warp_ftl_theory }
		}
	}

	option = {
		name = ACKNOWLEDGED
		trigger = {
			has_civic = civic_warp_ftl_theory
		}
	}
}

# main pulse event, called after jump order has been started
fleet_event = {
	id = warp_plugin.1
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		exists = this
		fleet_has_warp_drive = yes
	}

	immediate = {
		set_timed_fleet_flag = {
			flag = warp_plugin_active
			days = 2
		}
		if = {
			limit = {
				has_fleet_flag = warp_plugin_warp_completed
			}
			remove_fleet_flag = warp_plugin_warp_completed
			# get distance from jump source to jump destination
			export_trigger_value_to_variable = {
				trigger = distance
				variable = distance_traveled
				parameters = {
					source = event_target:warp_from
					type = euclidean
				}
			}
			fleet_get_warp_speed_mult = yes # get fleet min warp speed
			# modify warp time based on interstellar speed multiplier
			divide_variable = {
				which = distance_traveled
				value = warp_speed_mult
			}
			ceiling_variable = distance_traveled # make sure whole distances are traveled
			clear_variable = warp_speed_mult
			# ensure ship waits out cooldown
			if = {
				limit = {
					check_variable = {
						which = distance_traveled
						value < @min_warp_time
					}
				}
				set_variable = {
					which = distance_traveled
					value = @min_warp_time
				}
			}
			owner = {
				start_situation = {
					type = situation_warp_in_progress
					target = prev
				}
				random_situation = {
					limit = {
						is_situation_type = situation_warp_in_progress
						target = {
							is_same_value = root
						}
					}
					save_event_target_as = warp_situation
				}
			}
			fleet_event = { id = warp_plugin.10 }
		}
		else_if = {
			limit = {
				has_fleet_order = jumpdrive_order
			}
			solar_system = {
				save_event_target_as = warp_from
			}
			fleet_event = { id = warp_plugin.1 days = 1 }
		}
		else = {
			remove_fleet_flag = warp_plugin_active
		}
	}
}

# triggers on every tick, but requires a warp drive and a jump order to execute
fleet_event = {
	id = warp_plugin.2
	hide_window = yes
	# is_triggered_only = yes
	mean_time_to_happen = { days = 1 }

	trigger = {
		not = { has_fleet_flag = warp_plugin_active }
		has_fleet_order = jumpdrive_order
		fleet_has_warp_drive = yes
	}

	immediate = {
		fleet_event = { id = warp_plugin.1 }
	}
}

# called when ship with prototype drive jumps
ship_event = {
	id = warp_plugin.3
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		fleet = {
			not = { has_fleet_flag = warp_plugin_warp_completed }
			has_fleet_flag = warp_plugin_active
			fleet_has_warp_drive = yes
		}
	}

	immediate = {
		fleet = {
			set_timed_fleet_flag = {
				flag = warp_plugin_warp_completed
				days = 21
			}
			set_event_locked = yes
			add_modifier = { modifier = warp_plugin_warp_in_progress }
			# clear_orders = yes
			fleet_event = {
				id = warp_plugin.4
				days = 20
			}
		}
	}
}

# remove if warp is somehow not detected
# called after waiting out the cooldown period (20 days with vanilla defines)
fleet_event = {
	id = warp_plugin.4
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_fleet_flag = warp_plugin_warp_completed
	}

	immediate = {
		set_event_locked = no
		remove_modifier = warp_plugin_warp_in_progress
	}
}

# pulse event for when ship has jumped
fleet_event = {
	id = warp_plugin.10
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		exists = this
	}

	immediate = {
		set_timed_fleet_flag = {
			flag = warp_plugin_active
			days = 2
		}
		if = {
			limit = {
				not = { exists = event_target:warp_situation }
			}
			owner = {
				random_situation = {
					limit = {
						is_situation_type = situation_warp_in_progress
						target = {
							is_same_value = root
						}
					}
					save_event_target_as = warp_situation
				}
			}
			save_event_target_as = warp_target_system # used for MIA
		}
		if = { # mia check
			limit = {
				not = { exists = solar_system }
			}
			clear_variable = distance_traveled
			set_event_locked = no
			remove_modifier = warp_plugin_warp_in_progress
			abort_situation = event_target:warp_situation
			create_message = {
				type = MESSAGE_TYPE_ESN_ABORTED
				localization = MESSAGE_ESN_ABORTED
				days = 30
				target = this
				variable = {
					type = name
					localization = FLEET_NAME
					scope = this
				}
				variable = {
					type = name
					localization = SYSTEM
					scope = event_target:warp_target_system
				}
			}
			remove_fleet_flag = warp_plugin_active
		}
		else_if = { # duration check
			limit = {
				check_variable = {
					which = distance_traveled
					value > 0
				}
			}
			subtract_variable = {
				which = distance_traveled
				value = 1
			}
			event_target:warp_situation = {
				add_situation_progress = progress_rate
			}
			warp_plugin_failure_roll = yes
			fleet_event = { id = warp_plugin.10 days = 1 }
		}
		else = { # on warp end
			clear_variable = distance_traveled
			# remove_modifier = warp_plugin_warp_in_progress
			set_event_locked = no
			remove_modifier = warp_plugin_warp_in_progress
			abort_situation = event_target:warp_situation
			create_message = {
				type = MESSAGE_TYPE_ESN_ARRIVED
				localization = MESSAGE_ESN_ARRIVED
				days = 30
				target = this
				variable = {
					type = name
					localization = FLEET_NAME
					scope = this
				}
				variable = {
					type = name
					localization = SYSTEM
					scope = solar_system
				}
			}
			remove_fleet_flag = warp_plugin_active
		}
	}
}

## Situation: Warp in Progress
# on abort - failures
fleet_event = {
	id = warp_plugin.102
	title = warp_plugin.102.name
	desc = warp_plugin.102.desc
	picture = GFX_evt_ship_travel
	show_sound = event_ship_thrusters
	is_triggered_only = yes

	trigger = {
		fleet_has_warp_failure = yes
	}

	option = {
		name = UNFORTUNATE
		if = {
			limit = {
				has_fleet_flag = warp_plugin_weapon_failure
			}
			every_owned_ship = {
				add_modifier = {
					modifier = warp_plugin_weapon_failure
					months = 1
				}
			}
		}
		if = {
			limit = {
				has_fleet_flag = warp_plugin_propulsion_failure
			}
			every_owned_ship = {
				add_modifier = {
					modifier = warp_plugin_propulsion_failure
					months = 1
				}
			}
		}
		if = {
			limit = {
				has_fleet_flag = warp_plugin_shield_failure
			}
			every_owned_ship = {
				add_modifier = {
					modifier = warp_plugin_shield_failure
					months = 1
				}
			}
		}
		if = {
			limit = {
				has_fleet_flag = warp_plugin_armor_failure
			}
			every_owned_ship = {
				add_modifier = {
					modifier = warp_plugin_armor_failure
					months = 1
				}
			}
		}
		if = {
			limit = {
				has_fleet_flag = warp_plugin_cloak_failure
			}
			every_owned_ship = {
				add_modifier = {
					modifier = warp_plugin_cloak_failure
					months = 1
				}
			}
		}
		if = {
			limit = {
				has_fleet_flag = warp_plugin_sensor_failure
			}
			every_owned_ship = {
				add_modifier = {
					modifier = warp_plugin_sensor_failure
					months = 1
				}
			}
		}
		hidden_effect = {
			if = {
				limit = { has_fleet_flag = warp_plugin_weapon_failure }
				remove_fleet_flag = warp_plugin_weapon_failure
			}
			if = {
				limit = { has_fleet_flag = warp_plugin_propulsion_failure }
				remove_fleet_flag = warp_plugin_propulsion_failure
			}
			if = {
				limit = { has_fleet_flag = warp_plugin_shield_failure }
				remove_fleet_flag = warp_plugin_shield_failure
			}
			if = {
				limit = { has_fleet_flag = warp_plugin_armor_failure }
				remove_fleet_flag = warp_plugin_armor_failure
			}
			if = {
				limit = { has_fleet_flag = warp_plugin_cloak_failure }
				remove_fleet_flag = warp_plugin_cloak_failure
			}
			if = {
				limit = { has_fleet_flag = warp_plugin_sensor_failure }
				remove_fleet_flag = warp_plugin_sensor_failure
			}
		}
	}
}
